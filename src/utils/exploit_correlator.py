"""Exploit correlation module for CVEScannerX."""

import json
import subprocess
from typing import Dict, List, Optional
from ..utils.logger import get_logger

logger = get_logger(__name__)

class ExploitCorrelator:
    """Correlate CVEs with known exploits using searchsploit."""
    
    def __init__(self):
        """Initialize exploit correlator."""
        self._verify_searchsploit()

    def _verify_searchsploit(self) -> None:
        """Verify that searchsploit is available."""
        try:
            subprocess.run(['searchsploit', '-h'], 
                         capture_output=True, 
                         check=True)
        except subprocess.CalledProcessError as e:
            logger.error("searchsploit command failed. Is exploitdb installed?")
            raise
        except FileNotFoundError:
            logger.error("searchsploit command not found. Please install exploitdb.")
            raise

    def search_exploits(self, cve_id: str) -> List[Dict]:
        """Search for exploits related to a CVE."""
        try:
            result = subprocess.run(
                ['searchsploit', '--cve', cve_id, '--json'],
                capture_output=True,
                text=True,
                check=True
            )
            
            data = json.loads(result.stdout)
            exploits = data.get('RESULTS_EXPLOIT', [])
            
            # Format the results
            formatted_exploits = []
            for exploit in exploits:
                formatted_exploits.append({
                    'title': exploit.get('Title', ''),
                    'type': exploit.get('Type', ''),
                    'platform': exploit.get('Platform', ''),
                    'path': exploit.get('Path', ''),
                    'author': exploit.get('Author', ''),
                    'date': exploit.get('Date', '')
                })
                
            return formatted_exploits
            
        except subprocess.CalledProcessError as e:
            logger.error(f"Error searching exploits for {cve_id}: {e}")
            return []
        except json.JSONDecodeError as e:
            logger.error(f"Error parsing searchsploit output: {e}")
            return []

    def get_exploit_details(self, path: str) -> Optional[str]:
        """Get the content of an exploit file."""
        try:
            # Use -x to get the raw exploit content
            result = subprocess.run(
                ['searchsploit', '-x', path],
                capture_output=True,
                text=True,
                check=True
            )
            return result.stdout
        except subprocess.CalledProcessError as e:
            logger.error(f"Error getting exploit details for {path}: {e}")
            return None

    def update_database(self) -> bool:
        """Update the local exploit database."""
        try:
            subprocess.run(
                ['searchsploit', '--update'],
                check=True,
                capture_output=True
            )
            return True
        except subprocess.CalledProcessError as e:
            logger.error(f"Error updating exploit database: {e}")
            return False
